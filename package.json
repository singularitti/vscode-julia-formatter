{
  "name": "vscode-julia-formatter",
  "displayName": "Julia Formatter",
  "publisher": "singularitti",
  "icon": "icon.png",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/singularitti/vscode-julia-formatter"
  },
  "issues": {
    "url": "https://github.com/singularitti/vscode-julia-formatter/issues"
  },
  "description": "A formatter for the Julia language",
  "version": "0.5.0",
  "engines": {
    "vscode": "^1.40.0"
  },
  "categories": [
    "Formatters"
  ],
  "activationEvents": [
    "onLanguage:julia"
  ],
  "keywords": [
    "julia",
    "format",
    "style"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Julia Formatter configuration",
      "properties": {
        "juliaFormatter.overwriteFlags": {
          "type": "boolean",
          "default": false,
          "description": "If `true` accepts flag values passed from vs-code interface rather than default values of specified style."
        },
        "juliaFormatter.compile": {
          "type": "string",
          "default": "min",
          "enum": [
            "min",
            "all"
          ],
          "description": "Control the compilation level of Julia. Available values are 'min' or 'all'."
        },
        "juliaFormatter.style": {
          "type": "string",
          "default": "default",
          "enum": [
            "default",
            "yas",
            "blue"
          ],
          "description": "Formatting styles. Choose from: `'default'`, `'yas'`, and `'blue`'."
        },
        "juliaFormatter.margin": {
          "type": "number",
          "default": 92,
          "description": "The maximum number of characters of code on a single line. Lines over the limit will be wrapped if possible. There are cases where lines cannot be wrapped and they will still end up wider than the requested margin."
        },
        "juliaFormatter.indent": {
          "type": "number",
          "default": 4,
          "description": "The number of spaces used for an indentation."
        },
        "juliaFormatter.alwaysForIn": {
          "type": "boolean",
          "default": false,
          "description": "Always replaces `=` with `in` for `for` loops. For example, `for i = 1:10` will be transformed to `for i in 1:10`."
        },
        "juliaFormatter.whitespaceTypedefs": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, whitespace is added for type definitions. Make this `true` if you prefer `Union{A <: B, C}` to `Union{A<:B,C}`."
        },
        "juliaFormatter.whitespaceOpsInIndices": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, whitespace is added for binary operations in indices. Make this `true` if you prefer `arr[a + b]` to `arr[a+b]`."
        },
        "juliaFormatter.removeExtraNewlines": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, superflous newlines will be removed."
        },
        "juliaFormatter.importToUsing": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, `import` expressions are rewritten to `using` expressions."
        },
        "juliaFormatter.pipeToFunctionCall": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, `x |> f` is rewritten to `f(x)`."
        },
        "juliaFormatter.shortToLongFunctionDef": {
          "type": "boolean",
          "default": false,
          "description": "Transforms a short function definition to a long function definition."
        },
        "juliaFormatter.alwaysUseReturn": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, `return` will be prepended to the last expression where applicable in function definitions, macro definitions, and do blocks."
        },
        "juliaFormatter.whitespaceInKwargs": {
          "type": "boolean",
          "default": true,
          "description": "If `true`, `=` in keyword arguments will be surrounded by whitespace."
        },
        "juliaFormatter.annotateUntypedFieldsWithAny": {
          "type": "boolean",
          "default": true,
          "description": "If `true`, annotates fields in a type definitions with `::Any` if no type annotation is provided (Requires `JuliaFormatter.jl v0.6.3`)."
        },
        "juliaFormatter.formatDocstrings": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, format code docstrings with the same options used for the code source."
        },
        "juliaFormatter.alignAssignment": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, align to `=`-like operators. This covers variable assignments and short definition functions."
        },
        "juliaFormatter.alignStructField": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, align struct field definitions to `::` or `=` - whichever has higher precedence."
        },
        "juliaFormatter.alignConditional": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, align conditional expressions to either `?`, `:`, or both."
        },
        "juliaFormatter.alignPairArrow": {
          "type": "boolean",
          "default": false,
          "description": "If `true`, align pair arrows (`=>`)."
        },
        "juliaFormatter.sysimagePath": {
          "type": "string",
          "default": "",
          "description": "The Julia system image to use with Julia's `--sysimage` argument. If left blank, no system image will be used."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run -S esbuild-base -- --minify",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run -S esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run -S esbuild-base -- --sourcemap --watch",
    "test-compile": "tsc -p ./"
  },
  "devDependencies": {
    "@types/diff": "^4.0.2",
    "@types/glob": "^7.1.1",
    "@types/mocha": "^5.2.7",
    "@types/node": "^12.11.7",
    "@types/vscode": "^1.40.0",
    "esbuild": "^0.12.5",
    "glob": "^7.1.5",
    "mocha": "^6.2.2",
    "tslint": "^5.20.0",
    "typescript": "^4.1.3",
    "vscode-test": "^1.2.2"
  },
  "dependencies": {
    "@rauschma/stringio": "^1.4.0",
    "child_process": "^1.0.2",
    "diff": "^4.0.1",
    "untildify": "^4.0.0",
    "util": "^0.12.1"
  }
}
